generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    phoneNumber   String?   @unique
    emailVerified DateTime?
    image         String?
    credits       Float     @default(100)
    role          Int       @default(0) // 1024: admin, 0: user
    createdAt     DateTime  @default(now())

    accounts       Account[]
    sessions       Session[]
    payment        Payment[]
    favoriteModels UserFavoriteModel[]
    apiKeys        ApiKey[]
    predictions    Prediction[]
}

model ApiKey {
    id         String  @id @default(cuid())
    keyHash    String  @unique
    name       String
    active     Boolean @default(true)
    displayKey String

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AiModel {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    modelId      String
    name         String
    nameZh       String?
    tags         String[]
    desc         String
    descZh       String?
    runOn        String?
    runCount     Int      @default(0)
    cost         Float    @default(0)
    estRunTime   Float    @default(0)
    imgUrl       String?
    outputSchema Json?
    author       String? // Google, Meta
    github       String?
    paper        String?
    license      String?
    statusUrl    String?

    // Used for the api service
    outputFormat      String // text, uri, etc
    supportStream     Boolean @default(false)
    provider          String // r: Replicate, h: huggingface, etc
    providerModelName String? // Google/TTS:version

    userFavorites UserFavoriteModel[]
    params        ModelParam[]
    examples      ModelExample[]

    categories         ModelCategory[]
    categoriesOnModels categoriesOnModels[]
    predictions        Prediction[]
}

model ModelCategory {
    id     String  @id @default(cuid())
    name   String
    nameZh String
    order  Int?
    icon   String?

    models             AiModel[]
    categoriesOnModels categoriesOnModels[]
}

model categoriesOnModels {
    modelId       String
    categoryId    String
    AiModel       AiModel       @relation(fields: [modelId], references: [id], onDelete: Cascade)
    ModelCategory ModelCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@id([modelId, categoryId])
}

model ModelParam {
    id          String  @id @default(cuid())
    name        String
    displayName String? // The name for localization
    desc        String
    descZh      String? // The description in Chinese
    order       Int     @default(0)
    required    Boolean @default(false) // If this parameter is required

    type       String // string, number, boolean, json, chat_messages, chat_messages_system_role
    format     String? // uri, integer, float, enum
    assistTool InputAssistTool? // The input assist tool for this param

    defaultValue String?
    enum         String[] // enum values
    maximum      Float? // max value
    minimum      Float? // min value

    aiModelId String
    aiModel   AiModel @relation(fields: [aiModelId], references: [id], onDelete: Cascade)
}

enum InputAssistTool {
    PROMPT_FINE_TUNE
}

model ModelExample {
    id        String   @id @default(cuid())
    paramJson Json
    output    String[]

    aiModelId String
    aiModel   AiModel @relation(fields: [aiModelId], references: [id], onDelete: Cascade)
}

model Prediction {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    input           Json
    output          Json
    markedAsExample Boolean  @default(false)
    runTime         Float    @default(0)

    aiModel   AiModel @relation(fields: [aiModelId], references: [id], onDelete: Cascade)
    aiModelId String

    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model UserFavoriteModel {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    aiModel   AiModel @relation(fields: [aiModelId], references: [id], onDelete: Cascade)
    aiModelId String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}

model Payment {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    mchOrderNo  String?  @unique
    paid        Int?
    productName String?
    productType String?
    remark      Int?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model AppConfig {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    key       String
    value     String
}

// Admin only, please don't use this for normal users
model ModelProvider {
    id        String    @id @default(cuid())
    serviceId String
    name      String
    apiKeys   String[] // For pair keys, please use "clientid:clientsecret"
    createdAt DateTime  @default(now())
    expiresAt DateTime?
}
